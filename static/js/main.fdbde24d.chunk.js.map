{"version":3,"sources":["hooks/useInputChange.js","hooks/useCreateId.js","hooks/useThemeStyles.js","components/Box/styles.js","components/Box/Box.js","components/Checkbox/Checkbox.js","components/Fieldset/styles.js","components/Fieldset/Fieldset.js","components/InputColor/styles.js","components/InputColor/InputColor.js","components/InputNumber/styles.js","components/InputNumber/InputNumber.js","components/InputRange/InputRange.js","components/InputText/styles.js","components/InputText/InputText.js","components/RadioButton/RadioButton.js","App.js","serviceWorker.js","index.js"],"names":["useInputChange","initial","useState","inputs","setInput","handleInputChange","useCallback","event","currentTarget","name","value","useCreateId","useRef","shortid","generate","useThemeStyles","styles","useTheme","theme","inner","alignItems","borderStyle","borderWidth","display","outlineStyle","outlineWidth","cursor","content","backgroundColor","height","marginLeft","position","zIndex","borderLeft","paddingLeft","width","background","top","left","bottom","flexDirection","marginTop","borderTop","paddingTop","right","Box","borderRight","borderBottom","borderColor","marginRight","marginBottom","marginColor","paddingRight","paddingBottom","paddingColor","minHeight","maxHeight","minWidth","maxWidth","fontSize","lineHeight","outline","outlineOffset","outlineColor","text","baseStyles","BoxRef","offsetHeight","setOffsetHeight","useEffect","set","current","window","addEventListener","removeEventListener","offsetWidth","setOffsetWidth","inlineStylesInner","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","HeightNode","css","style","WidthNode","outerInlineStyles","ref","defaultProps","Checkbox","fieldset","border","margin","grid","gridTemplateColumns","gridGap","gridAutoFlow","Fieldset","children","legend","LegendNode","input","InputColor","label","onChange","id","Fragment","htmlFor","type","appearance","borderRadius","padding","InputNumber","max","min","inputMode","InputRange","step","InputText","colors","App","className","parseInt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdbde24d.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\n\nexport const useInputChange = (initial = {}) => {\n  const [inputs, setInput] = useState(initial)\n\n  const handleInputChange = useCallback(\n    event => {\n      setInput({\n          ...inputs,\n          [event.currentTarget.name]: event.currentTarget.value\n        })\n    },\n    [inputs, setInput]\n  )\n\n  return [inputs, handleInputChange]\n}\n\nexport default useInputChange\n","import { useRef } from 'react'\nimport shortid from 'shortid'\n\nconst useCreateId = () => useRef(`i${shortid.generate()}`)\n\nexport default useCreateId\n","import { useTheme } from 'emotion-theming'\n\nconst useThemeStyles = (styles) => styles(useTheme())\n\nexport default useThemeStyles\n","export default (theme) => ({\n  inner: {\n    alignItems: 'center',\n    borderStyle: 'solid',\n    borderWidth: 0,\n    display: 'flex',\n    outlineStyle: 'dashed',\n    outlineWidth: 0,\n    cursor: 'pointer'\n  },\n  content: {\n    backgroundColor: '#80ccff'\n  },\n\n  height: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: '8px',\n    position: 'relative',\n    zIndex: 2,\n    borderLeft: '1px solid #666',\n    paddingLeft: '4px',\n    width: '60px',\n\n    '&::before': {\n      background: '#666',\n      display: 'block',\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      height: '1px',\n      width: '7px',\n      left: '-4px'\n    },\n\n    '&::after': {\n      background: '#666',\n      display: 'block',\n      content: '\"\"',\n      position: 'absolute',\n      bottom: 0,\n      height: '1px',\n      width: '7px',\n      left: '-4px'\n    }\n  },\n\n  width: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '8px',\n    position: 'relative',\n    zIndex: 2,\n    borderTop: '1px solid #666',\n    paddingTop: '4px',\n\n    '&::before': {\n      background: '#666',\n      display: 'block',\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      width: '1px',\n      height: '7px',\n      top: '-4px'\n    },\n\n    '&::after': {\n      background: '#666',\n      display: 'block',\n      content: '\"\"',\n      position: 'absolute',\n      right: 0,\n      width: '1px',\n      height: '7px',\n      top: '-4px'\n    }\n  }\n})\n","import React, { useEffect, useRef, useState } from 'react' // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport { useThemeStyles } from '../../hooks'\n\nimport baseStyles from './styles'\n\nfunction Box({\n  borderTop,\n  borderRight,\n  borderBottom,\n  borderLeft,\n  borderColor,\n\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  marginColor,\n\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n  paddingColor,\n\n  minHeight,\n  height,\n  maxHeight,\n\n  minWidth,\n  width,\n  maxWidth,\n\n  fontSize,\n  lineHeight,\n\n  outline,\n  outlineOffset,\n  outlineColor,\n\n  text\n}) {\n\n  const styles = useThemeStyles(baseStyles)\n\n  const BoxRef = useRef(null)\n\n  const [offsetHeight, setOffsetHeight] = useState(null)\n\n  useEffect(() => {\n    function set() {\n      if (BoxRef) {\n        setOffsetHeight(BoxRef.current.offsetHeight)\n      }\n    }\n    set()\n    window.addEventListener('resize', set)\n    return () => window.removeEventListener('resize', set)\n  }, [\n    borderTop,\n    borderBottom,\n    paddingTop,\n    paddingBottom,\n    lineHeight,\n    minHeight,\n    height,\n    maxHeight,\n    text,\n    setOffsetHeight\n  ])\n\n  const [offsetWidth, setOffsetWidth] = useState(null)\n\n  useEffect(() => {\n    function set() {\n      if (BoxRef) {\n        setOffsetWidth(BoxRef.current.offsetWidth)\n      }\n    }\n    set()\n    window.addEventListener('resize', set)\n    return () => window.removeEventListener('resize', set)\n  }, [\n    borderLeft,\n    borderRight,\n    paddingLeft,\n    paddingRight,\n    minWidth,\n    width,\n    maxWidth,\n    text,\n    setOffsetWidth\n  ])\n\n  const inlineStylesInner = {\n    ...borderTop && { borderTopWidth: borderTop },\n    ...borderRight && { borderRightWidth: borderRight },\n    ...borderBottom && { borderBottomWidth: borderBottom },\n    ...borderLeft && { borderLeftWidth: borderLeft },\n    ...borderColor && { borderColor },\n    \n    ...marginTop && { marginTop },\n    ...marginRight && { marginRight },\n    ...marginBottom && { marginBottom },\n    ...marginLeft && { marginLeft },\n\n    ...paddingTop && { paddingTop },\n    ...paddingRight && { paddingRight },\n    ...paddingBottom && { paddingBottom },\n    ...paddingLeft && { paddingLeft },\n    ...paddingColor && { backgroundColor: paddingColor },\n\n    ...minHeight && { minHeight },\n    ...height && { height },\n    ...maxHeight && { maxHeight },\n\n    ...minWidth && { minWidth },\n    ...width && { width },\n    ...maxWidth && { maxWidth },\n\n    ...outline && { outlineWidth: outline },\n    ...outlineOffset && { outlineOffset },\n    ...outlineColor && { outlineColor }\n  }\n\n  const HeightNode = (\n    <div\n      css={styles.height}\n      style={{\n        ...marginBottom && { marginBottom },\n        ...marginTop && { marginTop }\n      }}\n    >\n      <span>{`${offsetHeight}px`}</span>\n    </div>\n  )\n\n  const WidthNode = (\n    <div\n      css={styles.width}\n      style={{\n        ...marginLeft && { marginLeft },\n        ...marginRight && { marginRight },\n        ...offsetHeight && { width: offsetWidth }\n      }}\n    >\n      <span>{`${offsetWidth}px`}</span>\n    </div>\n  )\n\n  const outerInlineStyles = {\n    ...marginColor && { backgroundColor: marginColor }\n  }\n\n  return (\n    <div>\n      <div style={{ display: 'flex', flexDirection: 'row' }}>\n        <div\n          style={outerInlineStyles}\n        >\n          <div\n            ref={BoxRef}\n            css={styles.inner}\n            style={inlineStylesInner}\n          >\n            <div\n              css={styles.content}\n              style={{\n              fontSize: `${fontSize}px`,\n              lineHeight: `${lineHeight}px`\n            }}\n            >\n              {text}\n            </div>\n          </div>\n        </div>\n        {HeightNode}\n      </div>\n      {WidthNode}\n    </div>\n  )\n}\n\nBox.propTypes = {\n  borderTop: PropTypes.number,\n  borderRight: PropTypes.number,\n  borderBottom: PropTypes.number,\n  borderLeft: PropTypes.number,\n  borderColor: PropTypes.string,\n\n  marginTop: PropTypes.number,\n  marginRight: PropTypes.number,\n  marginBottom: PropTypes.number,\n  marginLeft: PropTypes.number,\n  marginColor: PropTypes.string,\n\n  paddingTop: PropTypes.number,\n  paddingRight: PropTypes.number,\n  paddingBottom: PropTypes.number,\n  paddingLeft: PropTypes.number,\n  paddingColor: PropTypes.string,\n\n  minHeight: PropTypes.number,\n  height: PropTypes.number,\n  maxHeight: PropTypes.number,\n\n  minWidth: PropTypes.number,\n  width: PropTypes.number,\n  maxWidth: PropTypes.number,\n\n  fontSize: PropTypes.number,\n  lineHeight: PropTypes.number,\n\n  outline: PropTypes.number,\n  outlineOffset: PropTypes.number,\n\n  text: PropTypes.string\n}\n\nBox.defaultProps = {\n  borderTop: 0,\n  borderRight: 0,\n  borderBottom: 0,\n  borderLeft: 0,\n  borderColor: '#ffde8e',\n\n  marginTop: 0,\n  marginRight: 0,\n  marginBottom: 0,\n  marginLeft: 0,\n  marginColor: '#ffabab',\n\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  paddingColor: '#c9ff81',\n\n  minHeight: 0,\n  height: null,\n  maxHeight: null,\n\n  minWidth: 0,\n  width: null,\n  maxWidth: null,\n\n  fontSize: null,\n  lineHeight: null,\n\n  outline: null,\n  outlineOffset: null,\n  outlineColor: '#1a04d0',\n\n  text: null\n}\n\nexport default Box\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nfunction Checkbox({\n  checked,\n  label,\n  name,\n  onChange,\n  value\n}) {\n\n  return (\n    <React.Fragment>\n      <input\n        checked={checked}\n        name={name}\n        onChange={onChange}\n        type=\"checkbox\"\n        value={value}\n      />\n      <label>{label}</label>\n    </React.Fragment>\n  )\n}\n\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string\n}\n\nexport default Checkbox\n","export default {\n  fieldset: {\n    border: '1px solid #cccccc',\n    margin: 0\n  },\n  grid: {\n    alignItems: 'center',\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr',\n    gridGap: '0.3em 0.6em',\n    gridAutoFlow: 'dense'\n  }\n}\n","import React from 'react' // eslint-disable-line no-unused-vars\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport styles from './styles'\n\nfunction Fieldset({\n  children,\n  legend\n}) {\n\n  const LegendNode = legend && (\n    <legend>\n      {legend}\n    </legend>\n  )\n\n  return (\n    <fieldset css={styles.fieldset}>\n      {LegendNode}\n      <div css={styles.grid}>\n        {children}\n      </div>\n    </fieldset>\n  )\n}\n\nFieldset.propTypes = {\n  legend: PropTypes.string\n}\n\nexport default Fieldset\n","export default {\n  input: {\n    fontSize: 'inherit',\n\n    '@media (hover: none)': {\n      fontSize: '16px'\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport { useCreateId } from '../../hooks'\n\nimport styles from './styles'\n\nfunction InputColor({\n  label,\n  name,\n  onChange,\n  value\n}) {\n  const id = useCreateId()\n\n  return (\n    <React.Fragment>\n      <label htmlFor={id.current}>{label}</label>\n      <input\n        css={styles.input}\n        id={id.current}\n        name={name}\n        onChange={onChange}\n        type=\"color\"\n        value={value}\n      />\n    </React.Fragment>\n  )\n}\n\nInputColor.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string\n}\n\nexport default InputColor\n","export default {\n  input: {\n    appearance: 'none',\n    background: '#fff',\n    border: '1px solid #cccccc',\n    borderRadius: '2px',\n    fontSize: 'inherit',\n    minWidth: 0,\n    padding: '4px 8px',\n    width: 'auto',\n\n    '@media (hover: none)': {\n      fontSize: '16px'\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport { useCreateId } from '../../hooks'\n\nimport styles from './styles'\n\nfunction InputNumber({\n  label,\n  max,\n  min,\n  name,\n  onChange,\n  value\n}) {\n  const id = useCreateId()\n\n  return (\n    <React.Fragment>\n      <label htmlFor={id.current}>{label}</label>\n      <input\n        css={styles.input}\n        id={id.current}\n        inputMode=\"numeric\"\n        max={max}\n        min={min}\n        name={name}\n        onChange={onChange}\n        type=\"number\"\n        value={value}\n      />\n    </React.Fragment>\n  )\n}\n\nInputNumber.propTypes = {\n  label: PropTypes.string,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string\n}\n\nexport default InputNumber\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction InputRange({\n  label,\n  max,\n  min,\n  onChange,\n  step,\n  value\n}) {\n\n  return (\n    <>\n      <label>{label}</label>\n      <input\n        max={max}\n        min={min}\n        onChange={onChange}\n        step={step}\n        type=\"range\"\n        value={value}\n      />\n    </>\n  )\n}\n\nInputRange.propTypes = {\n  label: PropTypes.string,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onChange: PropTypes.func,\n  step: PropTypes.number,\n  value: PropTypes.number\n}\n\nInputRange.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1\n}\n\nexport default InputRange\n","export default {\n  input: {\n    appearance: 'none',\n    background: '#fff',\n    border: '1px solid #cccccc',\n    borderRadius: '2px',\n    fontSize: 'inherit',\n    minWidth: 0,\n    padding: '4px 8px',\n    width: 'auto',\n\n    '@media (hover: none)': {\n      fontSize: '16px'\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport { useCreateId } from '../../hooks'\n\nimport styles from './styles'\n\nfunction InputText({\n  label,\n  name,\n  onChange,\n  value\n}) {\n  const id = useCreateId()\n\n  return (\n    <React.Fragment>\n      <label htmlFor={id.current}>{label}</label>\n      <input\n        css={styles.input}\n        id={id.current}\n        name={name}\n        onChange={onChange}\n        type=\"text\"\n        value={value}\n      />\n    </React.Fragment>\n  )\n}\n\nInputText.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string\n}\n\nexport default InputText\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro' // eslint-disable-line no-unused-vars\n\nimport { useCreateId } from '../../hooks'\n\nimport styles from './styles'\n\nfunction InputText({\n  label,\n  name,\n  onChange,\n  value\n}) {\n  const id = useCreateId()\n\n  return (\n    <React.Fragment>\n      <input\n        css={styles.input}\n        id={id.current}\n        name={name}\n        onChange={onChange}\n        type=\"radio\"\n        value={value}\n      />\n      <label htmlFor={id.current}>\n        {label}\n      </label>\n    </React.Fragment>\n  )\n}\n\nInputText.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string\n}\n\nexport default InputText\n","import React from 'react' // eslint-disable-line no-unused-vars\nimport './App.css'\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { ThemeProvider } from 'emotion-theming'\n\nimport {\n  Box,\n  Fieldset,\n  InputColor, \n  InputNumber,\n  InputText,\n  RadioButton\n} from './components'\n\nimport { useInputChange } from './hooks'\n\nconst theme = {\n  colors: {}\n}\n\nfunction App() {\n\n  const initialState = {\n    marginTop: '8',\n    marginRight: '8',\n    marginBottom: '8',\n    marginLeft: '8',\n    marginColor: '#ffabab',\n\n    borderTop: '12',\n    borderRight: '12',\n    borderBottom: '12',\n    borderLeft: '12',\n    borderColor: '#ffde8e',\n\n    paddingTop: '16',\n    paddingRight: '16',\n    paddingBottom: '16',\n    paddingLeft: '16',\n    paddingColor: '#c9ff81',\n\n    minHeight: '0',\n    height: '',\n    maxHeight: '',\n\n    minWidth: '0',\n    width: '',\n    maxWidth: '',\n\n    fontSize: '16',\n    lineHeight: '24',\n\n    outline: '',\n    outlineOffset: '',\n    outlineColor: '#1a04d0',\n\n    text: 'Hello world!'\n  }\n\n  const [inputs, handleInputChange] = useInputChange(initialState)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className=\"box\">\n          <Box\n            borderTop={parseInt(inputs.borderTop)}\n            borderRight={parseInt(inputs.borderRight)}\n            borderBottom={parseInt(inputs.borderBottom)}\n            borderLeft={parseInt(inputs.borderLeft)}\n            borderColor={inputs.borderColor}\n\n            marginTop={parseInt(inputs.marginTop)}\n            marginRight={parseInt(inputs.marginRight)}\n            marginBottom={parseInt(inputs.marginBottom)}\n            marginLeft={parseInt(inputs.marginLeft)}\n            marginColor={inputs.marginColor}\n\n            paddingTop={parseInt(inputs.paddingTop)}\n            paddingRight={parseInt(inputs.paddingRight)}\n            paddingBottom={parseInt(inputs.paddingBottom)}\n            paddingLeft={parseInt(inputs.paddingLeft)}\n            paddingColor={inputs.paddingColor}\n\n            minHeight={parseInt(inputs.minHeight)}\n            height={parseInt(inputs.height)}\n            maxHeight={parseInt(inputs.maxHeight)}\n\n            minWidth={parseInt(inputs.minWidth)}\n            width={parseInt(inputs.width)}\n            maxWidth={parseInt(inputs.maxWidth)}\n\n            fontSize={parseInt(inputs.fontSize)}\n            lineHeight={parseInt(inputs.lineHeight)}\n\n            outline={parseInt(inputs.outline)}\n            outlineOffset={parseInt(inputs.outlineOffset)}\n            outlineColor={inputs.outlineColor}\n\n            text={inputs.text}\n          />\n        </div>\n        \n        <div className=\"controls\">\n\n          <Fieldset legend=\"Margin\">\n            <InputNumber\n              label=\"margin-top\"\n              min={0}\n              name=\"marginTop\"\n              onChange={handleInputChange}\n              value={inputs.marginTop}\n            />\n            <InputNumber\n              label=\"margin-right\"\n              min={0}\n              name=\"marginRight\"\n              onChange={handleInputChange}\n              value={inputs.marginRight}\n            />\n            <InputNumber\n              label=\"margin-bottom\"\n              min={0}\n              name=\"marginBottom\"\n              onChange={handleInputChange}\n              value={inputs.marginBottom}\n            />\n            <InputNumber\n              label=\"margin-left\"\n              min={0}\n              name=\"marginLeft\"\n              onChange={handleInputChange}\n              value={inputs.marginLeft}\n            />\n            <InputColor\n              label=\"margin color\"\n              name=\"marginColor\"\n              onChange={handleInputChange}\n              value={inputs.marginColor}\n            />\n          </Fieldset>\n\n          <Fieldset legend=\"Border\">\n            <InputNumber\n              label=\"border-top\"\n              min={0}\n              name=\"borderTop\"\n              onChange={handleInputChange}\n              value={inputs.borderTop}\n            />\n            <InputNumber\n              label=\"border-right\"\n              min={0}\n              name=\"borderRight\"\n              onChange={handleInputChange}\n              value={inputs.borderRight}\n            />\n            <InputNumber\n              label=\"border-bottom\"\n              min={0}\n              name=\"borderBottom\"\n              onChange={handleInputChange}\n              value={inputs.borderBottom}\n            />\n            <InputNumber\n              label=\"border-left\"\n              min={0}\n              name=\"borderLeft\"\n              onChange={handleInputChange}\n              value={inputs.borderLeft}\n            />\n            <InputColor\n              label=\"border-color\"\n              name=\"borderColor\"\n              onChange={handleInputChange}\n              value={inputs.borderColor}\n            />\n          </Fieldset>\n\n          <Fieldset legend=\"Padding\">\n            <InputNumber\n              label=\"padding-top\"\n              min={0}\n              name=\"paddingTop\"\n              onChange={handleInputChange}\n              value={inputs.paddingTop}\n            />\n            <InputNumber\n              label=\"padding-right\"\n              min={0}\n              name=\"paddingRight\"\n              onChange={handleInputChange}\n              value={inputs.paddingRight}\n            />\n            <InputNumber\n              label=\"padding-bottom\"\n              min={0}\n              name=\"paddingBottom\"\n              onChange={handleInputChange}\n              value={inputs.paddingBottom}\n            />\n            <InputNumber\n              label=\"padding-left\"\n              min={0}\n              name=\"paddingLeft\"\n              onChange={handleInputChange}\n              value={inputs.paddingLeft}\n            />\n            <InputColor\n              label=\"padding color\"\n              name=\"paddingColor\"\n              onChange={handleInputChange}\n              value={inputs.paddingColor}\n            />\n          </Fieldset>\n\n          <Fieldset legend=\"Height\">\n            <InputNumber\n              label=\"min-height\"\n              min={0}\n              name=\"minHeight\"\n              onChange={handleInputChange}\n              value={inputs.minHeight}\n            />\n            <InputNumber\n              label=\"height\"\n              min={0}\n              name=\"height\"\n              onChange={handleInputChange}\n              value={inputs.height}\n            />\n            <InputNumber\n              label=\"max-height\"\n              min={0}\n              name=\"maxHeight\"\n              onChange={handleInputChange}\n              value={inputs.maxHeight}\n            />\n          </Fieldset>\n\n          <Fieldset legend=\"Width\">\n            <InputNumber\n              label=\"min-width\"\n              min={0}\n              name=\"minWidth\"\n              onChange={handleInputChange}\n              value={inputs.minWidth}\n            />\n            <InputNumber\n              label=\"width\"\n              min={0}\n              name=\"width\"\n              onChange={handleInputChange}\n              value={inputs.width}\n            />\n            <InputNumber\n              label=\"max-width\"\n              min={0}\n              name=\"maxWidth\"\n              onChange={handleInputChange}\n              value={inputs.maxWidth}\n            />\n          </Fieldset>\n          <Fieldset legend=\"Font\">\n            <InputNumber\n              label=\"font-size\"\n              min={0}\n              name=\"fontSize\"\n              onChange={handleInputChange}\n              value={inputs.fontSize}\n            />\n            <InputNumber\n              label=\"line-height\"\n              min={0}\n              name=\"lineHeight\"\n              onChange={handleInputChange}\n              value={inputs.lineHeight}\n            />\n            <InputText\n              label=\"text\"\n              name=\"text\"\n              onChange={handleInputChange}\n              value={inputs.text}\n            />\n          </Fieldset>\n          <Fieldset legend=\"Outline\">\n            <InputNumber\n              label=\"outline\"\n              min={0}\n              name=\"outline\"\n              onChange={handleInputChange}\n              value={inputs.outline}\n            />\n            <InputNumber\n              label=\"outline-offset\"\n              name=\"outlineOffset\"\n              onChange={handleInputChange}\n              value={inputs.outlineOffset}\n            />\n            <InputColor\n              label=\"outline-color\"\n              name=\"outlineColor\"\n              onChange={handleInputChange}\n              value={inputs.outlineColor}\n            />\n          </Fieldset>\n\n          {false && (\n            <Fieldset legend=\"Units\">\n              <RadioButton\n                label=\"px\"\n                name=\"units\"\n              />\n              <RadioButton\n                label=\"rem\"\n                name=\"units\"\n              />\n            </Fieldset>\n          )}\n        </div>\n\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}